#version 330

vec3 blinn_single(int type, vec3 lightDir, vec3 eyeDir, vec3 ambient, vec3 diffuse, 
    vec3 specular, vec3 normal, vec3 spotDirection, vec2 spotFactor, vec3 attenuation, 
    float specularFactor, float wrapAroundFactor, float specPower, inout vec3 linearSpec)
{
    vec3 ldir = normalize(lightDir);
    float ldist = length(lightDir);
    float spotAttenuationFactor = 1.0;
    float attenuationFactor = 1.0;

    // no attenuation for direction light
    if (type != 2)
    {
        if (type == 3)
        {
            /* calculate spot attenuation */
            float spotAngle = acos(dot(-ldir, normalize(spotDirection)));
            spotAttenuationFactor = max((spotFactor.y/2) - spotAngle, 0) / (spotFactor.y/2);
        }

        /* calculate attenuation */
        attenuationFactor = spotAttenuationFactor / (attenuation.x + attenuation.y * ldist + attenuation.z * ldist * ldist);
    }
    
    /* calculate lambertian ratio */
    float lambRatio = max(dot(normal, ldir) + wrapAroundFactor, 0.0) / (1.0 + wrapAroundFactor);
    /* calculate specular ratio */
    float specRatio = pow(max(dot(normal, normalize(ldir + eyeDir)), 0.0), specPower) * specularFactor;

    linearSpec = specular * specRatio * attenuationFactor;
    /* calculate linear color factor */
    return (ambient * attenuationFactor) + 
        (diffuse * lambRatio * attenuationFactor) + 
        linearSpec;
}

vec3 blinn_multiple(samplerBuffer source, int num, vec3 ambient, vec3 fragPos, 
    vec3 fragNormal, vec3 eye, float specularFactor, 
    float wrapAroundFactor, float specPower, inout vec3 linearSpec)
{
    vec3 linear = ambient;

    for(int i = 0; i < num; i++)
    {
        int texel = i * 6;

        /* block1.x - type */
        /* block1.y - enabled */
        /* block1.z - affect radius */
        /* block1.w - position.x */
        vec4 block1 = texelFetch(source, texel + 0);
        if (block1.y == 0)
            continue;

        /* block2.x - position.y */
        /* block2.y - position.z  */
        /* block2.z - ambient.r */
        /* block2.w - ambient.g */
        vec4 block2 = texelFetch(source, texel + 1);


        /* light position */
        vec3 lposition = vec3(block1.w, block2.x, block2.y);
        /* calculate direction from fragment to light */
        vec3 lightDir = lposition - fragPos;
        /* distance to light */
        float dist = length(lightDir);
        /* check light distance */
        if (dist > block1.z)
            continue;

        vec4 block3 = texelFetch(source, texel + 2);
        vec4 block4 = texelFetch(source, texel + 3);
        vec4 block5 = texelFetch(source, texel + 4);
        vec4 block6 = texelFetch(source, texel + 5);
        /* ambient color */
        vec3 lambient = vec3(block2.z, block2.w, block3.x);
        /* diffuse color */
        vec3 ldiffuse = vec3(block3.y, block3.z, block3.w);
        /* specular color */
        vec3 lspecular = vec3(block4.x, block4.y, block4.z);

        /* spot directional */
        /* take effect with spot and directional light */
        vec3 lspotDirection = vec3(block4.w, block5.x, block5.y);
        /* x - spot cutoff */
        /* y - spot cutoff exponent */
        vec2 lspotFactor = vec2(block5.z, block5.w);

        /* calculate direction from fragment to eye */
        vec3 eyeDir = normalize(eye - fragPos);
        /* attenuation factor */
        /* block6.x - constant attenuation */
        /* block6.y - linear attenuation */
        /* block6.z - quadratic attenuation */
        vec3 lattenuation = vec3(block6.x, block6.y, block6.z);
        //vec3 lattenuation = vec3(0.5, 0.001, 0.00006);

        vec3 curSpec;
        linear += blinn_single(int(block1.x), lightDir, eyeDir, lambient, ldiffuse, lspecular, fragNormal, 
            lspotDirection, lspotFactor, lattenuation, specularFactor, wrapAroundFactor, specPower, curSpec);
        linearSpec += curSpec;
    }

    return linear;
}