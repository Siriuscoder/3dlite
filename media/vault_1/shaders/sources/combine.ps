uniform sampler2D fragMap;
uniform sampler2D normalMap;
uniform sampler2D diffuseMap;
uniform samplerBuffer lightSources;
uniform isamplerBuffer lightIndexes;
uniform vec3 eye;

in vec2 iuv;

const vec3 ambient = vec3(0.05, 0.05, 0.05);
const float wrapAroundFactor = 0.1;
const float specPower = 40.0;

vec3 blinn_multiple(samplerBuffer source, isamplerBuffer indexes, vec3 ambient, vec3 fragPos, 
    vec3 fragNormal, vec3 eye, float specularFactor, 
    float wrapAroundFactor, float specPower, inout vec3 linearSpec);

void main()
{
    /* fragment coordinate */
    vec4 diff = texture2D(diffuseMap, iuv);
    /* check fragment not shaded or self-illum material */
    if (diff.w == 1.0)
    {
        gl_FragColor = vec4(diff.xyz, 1.0);
        return;
    }

    vec4 fragCoord = texture2D(fragMap, iuv);
    vec4 fragNormalAndSpecular = texture2D(normalMap, iuv);
    vec3 linearSpec;
    vec3 linear = blinn_multiple(lightSources, lightIndexes, ambient, fragCoord.xyz,
        fragNormalAndSpecular.xyz, eye, fragNormalAndSpecular.w, wrapAroundFactor, specPower, linearSpec);

    gl_FragColor = vec4(linear * diff.rgb, 1.0);
}