#version 330

vec3 blinn_calculate(samplerBuffer source, int num, vec3 ambient, vec3 fragPos, 
    vec3 fragNormal, vec3 eye, float specularFactor, 
    float wrapAroundFactor, float specPower)
{
    vec3 linear = ambient;

    for(int i = 0; i < num; i++)
    {
        int texel = i * 6;

        /* block1.x - type */
        /* block1.y - enabled */
        /* block1.z - affect radius */
        /* block1.w - position.x */
        vec4 block1 = texelFetch(source, texel + 0);
        if (block1.y == 0)
            continue;

        /* block2.x - position.y */
        /* block2.y - position.z  */
        /* block2.z - ambient.r */
        /* block2.w - ambient.g */
        vec4 block2 = texelFetch(source, texel + 1);


        /* light position */
        vec3 lposition = vec3(block1.w, block2.x, block2.y);
        /* calculate direction from fragment to light */
        vec3 lightDir = lposition - fragPos;
        /* distance to light */
        float dist = length(lightDir);
        /* check light distance */
        if (dist > block1.z)
            continue;

        lightDir = normalize(lightDir);

        vec4 block3 = texelFetch(source, texel + 2);
        vec4 block4 = texelFetch(source, texel + 3);
        vec4 block5 = texelFetch(source, texel + 4);

        /* ambient color */
        vec3 lambient = vec3(block2.z, block2.w, block3.x);
        /* diffuse color */
        vec3 ldiffuse = vec3(block3.y, block3.z, block3.w);
        /* specular color */
        vec3 lspecular = vec3(block4.x, block4.y, block4.z);

        /* spot directional */
        /* take effect with spot and directional light */
        vec3 lspotDirection = vec3(block4.w, block5.x, block5.y);
        /* x - spot cutoff */
        /* y - spot cutoff exponent */
        vec2 lspotFactor = vec2(block5.z, block5.w);


        /* attenuation factor */
        /* block6.x - constant attenuation */
        /* block6.y - linear attenuation */
        /* block6.z - quadratic attenuation */
        // vec4 block6 = texelFetch(source, texel + 5);


        /* calculate spot attenuation */
        float spotAngle = acos(dot(-lightDir, normalize(lspotDirection)));
        float spotAttenuationFactor = max(lspotFactor.y - spotAngle, 0) / lspotFactor.y;
        /* calculate attenuation */
        float attenuationFactor = spotAttenuationFactor / (dist * dist * 0.00003);//(lattenuation[0] +
            //0.005 * dist + lattenuation[2] * dist * dist);

        /* calculate lambertian factor */
        float lambertian = max(dot(fragNormal, lightDir) + wrapAroundFactor, 0.0) / (1.0 + wrapAroundFactor);
        /* calculate direction from fragment to eye */
        vec3 eyeDir = normalize(eye - fragPos);
        /* calculate specular factor */
        vec3 halfv = normalize(lightDir + eyeDir);
        float specular = pow(max(dot(fragNormal, halfv), 0.0), specPower) * specularFactor;

        /* calculate linear color factor */
        linear += lambient * attenuationFactor;
        linear += ldiffuse * lambertian * attenuationFactor;
        linear += lspecular * specular * (attenuationFactor * 3);
    }

    return linear;
}