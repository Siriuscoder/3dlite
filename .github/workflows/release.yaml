name: Lite3D Release

on:
  push:
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build_release_linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.CHECKOUT_PAT }}

    - name: Install Linux dependencies
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build clang libc++-dev libc++abi-dev libdevil-dev libassimp-dev libsdl2-dev libfreetype6-dev libbullet-dev

    - name: Configure CMake
      run: >
        cmake --preset=Linux64_vcpkg
        -DSHOW_STATS=ON 
        -DGRAPHIC_BACKEND=GLEW
        -Wno-dev
  
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config Release

    - name: Compressing Artifacts
      run: |
        mv ${{ github.workspace }}/media/* ${{ github.workspace }}/build/bin/Release/
        mv ${{ github.workspace }}/build/vcpkg_installed/x64-linux-custom-static/lib/*.so* ${{ github.workspace }}/build/bin/Release/
        mv ${{ github.workspace }}/build/lib/Release/*.so* ${{ github.workspace }}/build/bin/Release/
        cd ${{ github.workspace }}/build/bin/
        zip -r ${{ github.workspace }}/linux-build-${{ github.ref_name }}.zip Release

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-build
        path: ${{ github.workspace }}/linux-build-${{ github.ref_name }}.zip

  build_release_windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.CHECKOUT_PAT }}

    - name: Configure CMake
      run: >
        cmake --preset=Windows64_vcpkg
        -DSHOW_STATS=ON 
        -DGRAPHIC_BACKEND=GLEW
        -Wno-dev
  
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config Release

    - name: Compressing Artifacts
      shell: pwsh
      run: |
        Move-Item â€“Path ${{ github.workspace }}\media\* -Destination ${{ github.workspace }}\build\bin\Release\
        Compress-Archive -Path ${{ github.workspace }}\build\bin\Release -DestinationPath ${{ github.workspace }}\windows-build-${{ github.ref_name }}.zip

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: ${{ github.workspace }}\windows-build-${{ github.ref_name }}.zip

  release:
    runs-on: ubuntu-latest
    needs: [build_release_linux, build_release_windows]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous tag
        id: previousTag
        run: |
          name=$(git --no-pager tag --sort=creatordate --merged ${{ github.ref_name }} | tail -2 | head -1)
          echo "Got tag: $name"
          echo "tag=$name" >> $GITHUB_OUTPUT

      - name: Generate Changelog
        id: genChangelog
        run: |
          changelog=$(git log ${{ steps.previousTag.outputs.tag }}..${{ github.ref_name }} --pretty="* %s" --no-merges | sort | uniq)
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$changelog" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Collecting Artifacts
        uses: actions/download-artifact@v4 
        with:
          path: ${{ github.workspace }}

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CHECKOUT_PAT }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref_name }}
          body: ${{ steps.genChangelog.outputs.changes }}
          draft: false
          prerelease: false

      - name: Upload Windows Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CHECKOUT_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ github.workspace }}/windows-build/windows-build-${{ github.ref_name }}.zip
          asset_name: windows-build-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Upload Linux Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.CHECKOUT_PAT }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: ${{ github.workspace }}/linux-build/linux-build-${{ github.ref_name }}.zip
          asset_name: linux-build-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Cleanup assets
      - uses: geekyeggo/delete-artifact@v5
        with:
          name: |
            windows-build
            linux-build
